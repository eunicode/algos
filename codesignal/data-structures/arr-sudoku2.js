/* =================================================================  
  INSTRUCTIONS
================================================================= */

/* 
sudoku2
https://app.codesignal.com/interview-practice/task/SKZ45AF99NpbnvgTn
https://leetcode.com/explore/interview/card/top-interview-questions-easy/92/array/769/

Sudoku is a number-placement puzzle. 
The objective is to fill a 9 × 9 grid with numbers in such a way that each column, each row, and each of the nine 3 × 3 sub-grids that compose the grid all contain all of the numbers from 1 to 9 one time.

Implement an algorithm that will check whether the given grid of numbers represents a valid Sudoku puzzle according to the layout rules described above. 
Note that the puzzle represented by grid does not have to be solvable.

Category: Arrays
Level: Easy
Time: 30 mins
*/

/* =================================================================  
  SOLUTIONS
================================================================= */

/*
 */

/* =================================================================  
  CODE
================================================================= */

/* eslint-disable */

function sudoku2() {}

/* =================================================================  
  TESTS
================================================================= */

console.log(
  sudoku2([
    ['.', '.', '.', '1', '4', '.', '.', '2', '.'],
    ['.', '.', '6', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '1', '.', '.', '.', '.', '.', '.'],
    ['.', '6', '7', '.', '.', '.', '.', '.', '9'],
    ['.', '.', '.', '.', '.', '.', '8', '1', '.'],
    ['.', '3', '.', '.', '.', '.', '.', '.', '6'],
    ['.', '.', '.', '.', '.', '7', '.', '.', '.'],
    ['.', '.', '.', '5', '.', '.', '.', '7', '.']
  ])
);
// true

// console.log(
//   sudoku2([
//     ['.', '.', '.', '.', '2', '.', '.', '9', '.'],
//     ['.', '.', '.', '.', '6', '.', '.', '.', '.'],
//     ['7', '1', '.', '.', '7', '5', '.', '.', '.'],
//     ['.', '7', '.', '.', '.', '.', '.', '.', '.'],
//     ['.', '.', '.', '.', '8', '3', '.', '.', '.'],
//     ['.', '.', '8', '.', '.', '7', '.', '6', '.'],
//     ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
//     ['.', '1', '.', '2', '.', '.', '.', '.', '.'],
//     ['.', '2', '.', '.', '3', '.', '.', '.', '.']
//   ])
// );
// false

// console.log(
//   sudoku2([
//     ['.', '.', '4', '.', '.', '.', '6', '3', '.'],
//     ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
//     ['5', '.', '.', '.', '.', '.', '.', '9', '.'],
//     ['.', '.', '.', '5', '6', '.', '.', '.', '.'],
//     ['4', '.', '3', '.', '.', '.', '.', '.', '1'],
//     ['.', '.', '.', '7', '.', '.', '.', '.', '.'],
//     ['.', '.', '.', '5', '.', '.', '.', '.', '.'],
//     ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
//     ['.', '.', '.', '.', '.', '.', '.', '.', '.']
//   ])
// );
// false

// console.log(
//   sudoku2([
//     ['.', '.', '.', '.', '.', '.', '.', '.', '2'],
//     ['.', '.', '.', '.', '.', '.', '6', '.', '.'],
//     ['.', '.', '1', '4', '.', '.', '8', '.', '.'],
//     ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
//     ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
//     ['.', '.', '.', '.', '3', '.', '.', '.', '.'],
//     ['5', '.', '8', '6', '.', '.', '.', '.', '.'],
//     ['.', '9', '.', '.', '.', '.', '4', '.', '.'],
//     ['.', '.', '.', '.', '5', '.', '.', '.', '.']
//   ])
// );
// true

/* =================================================================  
  NOTES
================================================================= */

/*
 */

/* =================================================================  
  TO DO
================================================================= */

/*
 */

/*
--------------------------------------------------------------------
*/
